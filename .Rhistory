mtcars
?mtcars
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars, lower = list(continuous = wrap(my_fn, method="lm")))
ggpairs(mtcars[c(8,9)], lower = list(continuous = wrap(my_fn, method="lm")))
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(my_fn, method="lm")))
ggpairs(mtcars, lower = list(continuous = wrap(my_fn, method="lm")))
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(my_fn, method="lm")))
wrappedFunction <- function(data, mapping, method="lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(wrappedFunction)))
wrappedFunction <- function(data, method="lm", ...){
p <- ggplot(data = data) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(wrappedFunction)))
wrappedFunction <- function(data, mapping, method="lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(wrappedFunction)))
wrappedFunction <- function(data, mapping, method="lm"){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(wrappedFunction)))
wrappedFunction <- function(data, mapping, method="lm"){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method)
p
}
ggpairs(mtcars[c(1,6,9)], lower = list(continuous = wrap(wrappedFunction)))
ggpairs(mtcars[c(mpg,wt,am)], lower = list(continuous = wrap(wrappedFunction)))
ggpairs(mtcars[c('mpg','wt','am')], lower = list(continuous = wrap(wrappedFunction)))
?ggpairs
plot(rnorm(1:10))
install.packages("caret")
library("Caret")
library("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library("Hmisc", lib.loc="D:/installedWindowTools/R/R-3.4.0patched/library")
help(cut2)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
View(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
View(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
-inTrain
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
plot(cut2(mixtures$CompressiveStrength))
qplot(CompressiveStrength,colours=Cement,data=mixtures)
qplot(CompressiveStrength,colour=Cement,data=mixtures)
qplot(inTrain,CompressiveStrength,colour=Cement,data=mixtures)
qplot(inTrain,CompressiveStrength,colour=Cement,data=training)
names(mixtures)
qplot(inTrain,CompressiveStrength,colour=FlyAsh,data=training)
qplot(inTrain,CompressiveStrength,colour=Water,data=training)
qplot(inTrain,CompressiveStrength,colour=Superplasticizer,data=training)
qplot(inTrain,CompressiveStrength,colour=CoarseAggregate,data=training)
qplot(inTrain,CompressiveStrength,colour=FineAggregate,data=training)
qplot(inTrain,CompressiveStrength,colour=Age,data=training)
cutCement<- cut2(training$Cement)
qplot(inTrain,cutCement,colour=Cement,data=training)
cutIndex<- cut2(inTrain)
qplot(inTrain,cutIndex,colour=Cement,data=training)
cutIndex<- cut2(inTrain)
qplot(cutIndex,CompressiveStrength,colour=Cement,data=training)
cutCement<- cut2(training$Cement)
qplot(cutIndex,CompressiveStrength,colour=cutCement,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
cutAge<- cut2(training$Age)
qplot(inTrain,CompressiveStrength,colour=cutAge,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
cutBlastFurnaceSlag<- cut2(training$BlastFurnaceSlag)
qplot(inTrain,CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
cutWater<- cut2(training$Water)
qplot(inTrain,CompressiveStrength,colour=Water,data=training)
cutWater<- cut2(training$Water)
qplot(inTrain,CompressiveStrength,colour=cutWater,data=training)
cutSuperplasticizer<- cut2(training$Superplasticizer)
qplot(inTrain,CompressiveStrength,colour=Superplasticizer,data=training)
cutSuperplasticizer<- cut2(training$Superplasticizer)
qplot(inTrain,CompressiveStrength,colour=cutSuperplasticizer,data=training)
cutCoarseAggregate<- cut2(training$CoarseAggregate)
qplot(inTrain,CompressiveStrength,colour=cutCoarseAggregate,data=training)
cutFineAggregate<- cut2(training$FineAggregate)
qplot(inTrain,CompressiveStrength,colour=cutFineAggregate,data=training)
cutFlyAsh<- cut2(training$FlyAsh)
qplot(inTrain,CompressiveStrength,colour=cutFlyAsh,data=training)
View(mixtures)
summary(mixtures)
log(0)
summary(mixtures)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer)+1)
data("iris")
data("iris")
library("ggplot")
library(ggplot2)
names(iris)
table(iris$Species)
library(carret)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~., method="rpart",data=training)
install.packages("e1071")
install.packages("e1071")
modFit <- train(Species ~., method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex =.8)
install.packages("rattle")
install.packages("Rgtk2")
install.packages("RGtk2")
setwd("D:/Shared_raxonserver/workAndStudy/especialization/Data Science/8-Practical Machine Learning/Week4/Course Project/repo/PredictionAssignment")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(rattle)
install.packages("RGtk2")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(rattle)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(randomForest)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(dplyr)
library(ggplot2)
library(utils)
set.seed(301)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(dplyr)
library(ggplot2)
library(utils)
set.seed(301)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
training <- read.csv(trainingFile)
testing  <- read.csv(testingFile)
# create a partition using caret with the training dataset on 70,30 ratio
inTrain  <- createDataPartition(training$classe, p=0.7, list=FALSE)
TrainSet <- training[inTrain, ]
TestSet  <- training[-inTrain, ]
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(dplyr)
library(ggplot2)
library(utils)
set.seed(301)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
inTrain  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
TrainSet <- training[inTrain, ]
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
inTrain  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
TrainSet <- trainingRawData[inTrain, ]
TestSet  <- trainingRawData[-inTrain, ]
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(caret)
library(dplyr)
library(ggplot2)
library(utils)
set.seed(301)
trainingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "traininig.csv"
testingFile <- "testing.csv"
download.file(url=trainingUrl,destfile= trainingFile, quiet = TRUE)
download.file(url=testingUrl,destfile= testingFile, quiet = TRUE)
trainingRawData <- read.csv(trainingFile)
testingRawData  <- read.csv(testingFile)
inTrain  <- createDataPartition(trainingRawData$classe, p=0.7, list=FALSE)
trainSet <- trainingRawData[inTrain, ]
testSet  <- trainingRawData[-inTrain, ]
View(testingRawData)
View(testingRawData)
View(trainingRawData)
View(trainSet)
View(trainSet)
View(trainSet)
View(testingRawData)
trainingRawData$classe
View(trainingRawData)
names(trainingRawData)
summary(trainingRawData)
